-----------------------------Oriented object programming-----------------------------------

- Class.

A class is a group of functions and properties that have similar caracteristics.

	A class can be initialized by:

		class Name_of_my_class{
			//here are the properties and methods of the class	
		}

- Object.

An object is an instance of a class.
A class can isntance one or many different objects with different properties and functions

	An object can be created by:

		$obj = new Name_of_my_class;

	NOTE: As you can see the object is instanced by the class "Name_of_myclass" that we created previously

- Properties.

Properties are those atributes that an object could have. For instance: If we set a car as an object, its properties are the color, model, number of doors and so on.

	Properties are set by the following sintax:

		public $name_of_my_property1 = [the_value_of_my_property1];

	NOTE: The "public" keyword makes reference to the visibility of the the property.

	- Calling a property by an object.

		$obj->name_of_my_property;

	NOTE: In case that there is a need on using a property inside the same class you call it using the keyword "$this" instead "$obj" which is our previously created object. This is because all objects should be instanced outside of te class.

- Methods or functions.

Methods of functions are those operations that need to be applied in a program.

	- Creating a function.

		public function My_function(){
			//operation of my fucntion
		}

	- Calling a function from an object.

		$obj->My_function();

- Special methods or magic methods

	- Construct:

		This method is special because is automatically trigged everytime that an object is instanced.

		The sintaxis to create this method is:

			public function __construct(){
				//Here you can set instructions that you want to execute
			}

	- Destruct:

		This method is trigged once the object is destroyed and is useful for closing prosess

		The sintaxis to create this method is:

			public function __destruct(){
				//Here you can set instructions that you want to execute one an object is destroyed
			}

	- Unset:

		Normally an object is destroyed once all script is run. This method allow us to destroy an object before the whole script is completely run.

		This means that if we set a __destruct() method before, it will be trigget as soon as unset() is executed.

		The sintax for this method is:

			unset($obj);

---------------------------------------------------------------------------------------------------------------------------------

Inheritance

	Inheritance is the ability of a class to use, overwrite and add properties or methods from a parent class.

	To inherit a class from a parent we use the keyword "extends"

	Creating an inherited class ("MyNewClass") which inherit methods and properties from a parent class called "MyParentClass":

		class MyNewClass extends MyParentClass{
			//methods and properties go here
			//This class can call properties and methods from the class MyParentClass
		}

	NOTE: In this case we asume that a parent class (MyParentClass) was created previously and has its own metods and properties that are aviable to use with an extended class ("MyNewClass")

Overwritting a mehod or property

	Extended classes can overwrite a method property from a parent class by creating a property or method with the same name of it in the extended class.

		class parent{
			$property1 = OriginalValue;

			public function Method1(){
				//Original instructions
			}
		}

		class child extends parent{
			$property1 = ModifiedValue;//The value of this property is modified or overwritten

			public function method1(){
				//Modified or overwitten instructions from "parent" class
			}
		}

Overwritting a method without losing exsistent instructions in the parent class.

	To overwrite a methot from a parent class without losing any instruction we use the SCOPE RESOLUTION OPERATION (::) and the keyword parent.

	The sintax to call it is:

		public method(){
			parent::parent_method();
		}

	A practical example:

                class parent{ 
                        $property1 = OriginalValue;  

                        public function Method1(){ 
                                //Original instructions
                        }
                }

                class child extends parent{
                        $property1 = ModifiedValue;//The value of this property is modified or overwritten

                        public function method2(){
				parent::method1();//Calling the instructions of "method1()"
                                //Modified or overwitten instructions from "parent" class
                        }
                }
	
------------------------------------------------------------------------------------------------------------------------------------------

Methods and properties visibility

	Te visibility defines how a property or a method can be accesed by an object.

	There are three levels.

		- Public: 	A property or method can be accesed by any object from anywhere.
		- Private:	A property or method can be only accesed by objects instanced by the same class that they bellong to
		- Protected:	A property or method can be only accesed by onjects instanced by the same class that they bellong to and extended classes (In this sence if you want to use a method declarated as protected from outside of the clas that it bellogs to. You need to create a public method in the extended class that calls to the protected method that we need to use)

	Private example:

		class classParent{
			$property = value;

			private function parentMethod(){
				//intructions from the parent method
			}
		}

		$object = new classParent;

		$object->parentMethod();// This is the only way to call a private function or method

	Protected example:

		class classParent{ 
                        $property = value;

                        protected function parentMethod(){ 
                                //intructions from the parent method
                        }
                }

		// To acess to that protected function called parentMethod() we have to create a extended class with a public method to call the private method of the classParent

		class classChild extends classParent{
			$property_child = value_child;

			public function callingParentMethod(){
				return $this->parentMethod();
			}
		}

		// And then you are allow to use the parentMethod by means of callingParentMethod from outside of the class "classParent"

		$oject = new classChild;

		$object->callingParentMethod();
------------------------------------------------------------------------------------------------------------------------------------
